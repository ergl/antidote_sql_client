// Generated by BUCKLESCRIPT VERSION 1.4.2 , PLEASE EDIT WITH CARE
'use strict';

var $$Set = require('bs-platform/lib/js/set');
var Char = require('bs-platform/lib/js/char');
var List = require('bs-platform/lib/js/list');
var Block = require('bs-platform/lib/js/block');
var Curry = require('bs-platform/lib/js/curry');
var Caml_obj = require('bs-platform/lib/js/caml_obj');
var Encoding = require('./encoding');
var Pervasives = require('bs-platform/lib/js/pervasives');
var Js_undefined = require('bs-platform/lib/js/js_undefined');
var Caml_builtin_exceptions = require('bs-platform/lib/js/caml_builtin_exceptions');

function d_int(x) {
    return /* I */ Block.__(0, [x]);
}

function d_float(f) {
    return /* F */ Block.__(1, [f]);
}

function d_string(s) {
    return /* S */ Block.__(2, [s]);
}

function table(t) {
    return /* KTable */ Block.__(0, [t, /* Bottom */ 0]);
}

function spk(t, n) {
    return /* KTable */ Block.__(0, [t, /* KSPk */ Block.__(1, [n, /* Bottom */ 0])]);
}

function field(t, n, name) {
    return /* KTable */ Block.__(0, [
        t,
        /* KSPk */ Block.__(1, [n, /* KField */ Block.__(3, [name])])
    ]);
}

function raw_index(t, i) {
    return /* KTable */ Block.__(0, [t, /* KIndex */ Block.__(4, [i, /* Bottom */ 0])]);
}

function raw_index_field(t, i, f) {
    return /* KTable */ Block.__(0, [
        t,
        /* KIndex */ Block.__(4, [i, /* KIndexField */ Block.__(5, [f, /* Bottom */ 0])])
    ]);
}

function raw_index_field_value(t, i, f, v) {
    return /* KTable */ Block.__(0, [
        t,
        /* KIndex */ Block.__(4, [
            i,
            /* KIndexField */ Block.__(5, [
                f,
                /* KIndexFieldValue */ Block.__(6, [v, /* Bottom */ 0])
            ])
        ])
    ]);
}

function index_key(t, i, f, v, k) {
    return /* KTable */ Block.__(0, [
        t,
        /* KIndex */ Block.__(4, [
            i,
            /* KIndexField */ Block.__(5, [
                f,
                /* KIndexFieldValue */ Block.__(6, [
                    v,
                    /* KIndexFieldKey */ Block.__(7, [k])
                ])
            ])
        ])
    ]);
}

function raw_uindex_field(t, i, f) {
    return /* KTable */ Block.__(0, [
        t,
        /* KUIndex */ Block.__(8, [
            i,
            /* KUIndexField */ Block.__(9, [f, /* Bottom */ 0])
        ])
    ]);
}

function uindex_key(t, i, f, v) {
    return /* KTable */ Block.__(0, [
        t,
        /* KUIndex */ Block.__(8, [
            i,
            /* KUIndexField */ Block.__(9, [f, /* KUIndexFieldValue */ Block.__(10, [v])])
        ])
    ]);
}

var prefix_separator_str = Char.escaped(/* "%" */ 37);

var complex_key_separator_str = Char.escaped(/* "&" */ 38);

function dencoding(data) {
    var $js;
    switch (data.tag | 0) {
        case 0:
            $js = Encoding.d_int(data[0]);
            break;
        case 1:
            $js = Encoding.d_float(data[0]);
            break;
        case 2:
            $js = Encoding.d_string(data[0]);
            break;

    }
    return Encoding.d_string($js);
}

function create_complex_key(nl) {
    var _v = /* First */ 332064784;
    var _acc = '';
    var _param = nl;
    while (true) {
        var param = _param;
        var acc = _acc;
        var v = _v;
        if (param) {
            var ns = param[1];
            var enc = dencoding(param[0]);
            _param = ns;
            if (v !== 332064784) {
                _acc = acc + (complex_key_separator_str + enc);
                _v = /* Next */ 870035731;
                continue;
            } else {
                _acc = acc + enc;
                _v = /* Next */ 870035731;
                continue;
            }
        } else {
            return acc;
        }
    }
}

function repr$prime(_key, _acc) {
    while (true) {
        var acc = _acc;
        var key = _key;
        if (typeof key === 'number') {
            return acc;
        } else {
            switch (key.tag | 0) {
                case 1:
                    _acc = /* :: */ [
                        dencoding(key[0]),
                        /* :: */ [Encoding.d_string('PRIMARY'), acc]
                    ];
                    _key = key[1];
                    continue;
                case 2:
                    _acc = /* :: */ [create_complex_key(key[0]), acc];
                    _key = key[1];
                    continue;
                case 3:
                    return /* :: */ [Encoding.d_string(key[0]), acc];
                case 4:
                    _acc = /* :: */ [
                        Encoding.d_string(key[0]),
                        /* :: */ [Encoding.d_string('INDEX'), acc]
                    ];
                    _key = key[1];
                    continue;
                case 6:
                    _acc = /* :: */ [dencoding(key[0]), acc];
                    _key = key[1];
                    continue;
                case 8:
                    _acc = /* :: */ [
                        Encoding.d_string(key[0]),
                        /* :: */ [Encoding.d_string('UINDEX'), acc]
                    ];
                    _key = key[1];
                    continue;
                case 0:
                case 5:
                case 9:
                    _acc = /* :: */ [Encoding.d_string(key[0]), acc];
                    _key = key[1];
                    continue;
                case 7:
                case 10:
                    return /* :: */ [dencoding(key[0]), acc];

            }
        }
    }
}

function repr(k) {
    var param = List.rev(repr$prime(k, /* [] */ 0));
    if (param) {
        return List.fold_left(
            function(s, p) {
                return s + (prefix_separator_str + p);
            },
            param[0],
            param[1]
        );
    } else {
        throw [
            Caml_builtin_exceptions.match_failure,
            ['/Users/ryan/dev/kset/src/kset.ml', 109, 11]
        ];
    }
}

function v_compare(x, y) {
    var n = Caml_obj.caml_compare(x, y);
    if (n !== 0) {
        if (n < 0) {
            return /* Lt */ 1;
        } else {
            return /* Gt */ 2;
        }
    } else {
        return /* Eq */ 0;
    }
}

function key_compare(left, right) {
    var exit = 0;
    var l;
    var lch;
    var r;
    var rch;
    if (typeof left === 'number') {
        if (typeof right === 'number') {
            return /* Eq */ 0;
        } else {
            return /* Lt */ 1;
        }
    } else {
        switch (left.tag | 0) {
            case 0:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else if (right.tag) {
                    return Pervasives.failwith('Wrong pair');
                } else {
                    l = left[0];
                    lch = left[1];
                    r = right[0];
                    rch = right[1];
                    exit = 1;
                }
                break;
            case 1:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 1:
                            return compare_same_level(
                                /* tuple */ [left[0], left[1]],
                                /* tuple */ [right[0], right[1]]
                            );
                        case 4:
                        case 8:
                            return /* Lt */ 1;
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 2:
                if (typeof right === 'number') {
                    if (right) {
                        return /* Lt */ 1;
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return compare_same_level(
                                /* tuple */ [left[0], left[1]],
                                /* tuple */ [right[0], right[1]]
                            );
                        case 0:
                        case 1:
                        case 4:
                        case 8:
                            return Pervasives.failwith('Wrong pair');
                        default:
                            return /* Lt */ 1;
                    }
                }
                break;
            case 3:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 3:
                            return v_compare(left[0], right[0]);
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 4:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 1:
                            return /* Gt */ 2;
                        case 4:
                            l = left[0];
                            lch = left[1];
                            r = right[0];
                            rch = right[1];
                            exit = 1;
                            break;
                        case 8:
                            return /* Lt */ 1;
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 5:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 5:
                            l = left[0];
                            lch = left[1];
                            r = right[0];
                            rch = right[1];
                            exit = 1;
                            break;
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 6:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 6:
                            return compare_same_level(
                                /* tuple */ [left[0], left[1]],
                                /* tuple */ [right[0], right[1]]
                            );
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 7:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 7:
                            return v_compare(left[0], right[0]);
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 8:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 1:
                        case 4:
                            return /* Gt */ 2;
                        case 8:
                            l = left[0];
                            lch = left[1];
                            r = right[0];
                            rch = right[1];
                            exit = 1;
                            break;
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 9:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 9:
                            l = left[0];
                            lch = left[1];
                            r = right[0];
                            rch = right[1];
                            exit = 1;
                            break;
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;
            case 10:
                if (typeof right === 'number') {
                    if (right) {
                        return Pervasives.failwith('Wrong pair');
                    } else {
                        return /* Gt */ 2;
                    }
                } else {
                    switch (right.tag | 0) {
                        case 2:
                            return /* Lt */ 1;
                        case 10:
                            return v_compare(left[0], right[0]);
                        default:
                            return Pervasives.failwith('Wrong pair');
                    }
                }
                break;

        }
    }
    if (exit === 1) {
        return compare_same_level(/* tuple */ [l, lch], /* tuple */ [r, rch]);
    }
}

function compare_same_level(param, param$1) {
    var r = v_compare(param[0], param$1[0]);
    if (r !== 0) {
        return r;
    } else {
        return key_compare(param[1], param$1[1]);
    }
}

function compare(x, y) {
    var param = key_compare(x, y);
    switch (param) {
        case 0:
            return 0;
        case 1:
            return -1;
        case 2:
            return 1;

    }
}

var Storage = $$Set.Make(/* module */ [/* compare */ compare]);

var empty = [Storage[/* empty */ 0]];

function wrap(fn) {
    try {
        return /* Some */ [Curry._1(fn, /* () */ 0)];
    } catch (exn) {
        if (exn === Caml_builtin_exceptions.not_found) {
            return /* None */ 0;
        } else {
            throw exn;
        }
    }
}

function add(elt, t) {
    t[0] = Curry._2(Storage[/* add */ 3], elt, t[0]);
    return /* () */ 0;
}

function find_opt(x, t) {
    return wrap(function() {
        return Curry._2(Storage[/* find */ 24], x, t[0]);
    });
}

function find(x, t) {
    return Js_undefined.from_opt(find_opt(x, t));
}

function next_key_opt(elt, t) {
    var match = Curry._2(Storage[/* split */ 23], elt, t[0]);
    if (match[1] !== 0) {
        var gt = match[2];
        return wrap(function() {
            return Curry._1(Storage[/* min_elt */ 20], gt);
        });
    } else {
        return /* None */ 0;
    }
}

function next_key(elt, t) {
    return Js_undefined.from_opt(next_key_opt(elt, t));
}

function prev_key_opt(elt, t) {
    var match = Curry._2(Storage[/* split */ 23], elt, t[0]);
    var lt = match[0];
    if (match[1] !== 0) {
        return wrap(function() {
            return Curry._1(Storage[/* max_elt */ 21], lt);
        });
    } else {
        return /* None */ 0;
    }
}

function prev_key(elt, t) {
    return Js_undefined.from_opt(prev_key_opt(elt, t));
}

function is_same_level(param) {
    var match = param[0];
    if (typeof match === 'number') {
        return /* false */ 0;
    } else if (match.tag) {
        return /* false */ 0;
    } else {
        var match$1 = match[1];
        if (typeof match$1 === 'number') {
            if (match$1) {
                return /* false */ 0;
            } else {
                var match$2 = param[1];
                if (
                    typeof match$2 === 'number' ||
                        !(!match$2.tag && typeof match$2[1] === 'number')
                ) {
                    return /* false */ 0;
                } else {
                    return /* true */ 1;
                }
            }
        } else {
            switch (match$1.tag | 0) {
                case 1:
                    var $js = match$1[1];
                    if (typeof $js === 'number') {
                        if ($js) {
                            return /* false */ 0;
                        } else {
                            var match$3 = param[1];
                            if (typeof match$3 === 'number') {
                                return /* false */ 0;
                            } else if (match$3.tag) {
                                return /* false */ 0;
                            } else {
                                var match$4 = match$3[1];
                                if (
                                    typeof match$4 === 'number' ||
                                        !(match$4.tag === 1 &&
                                            typeof match$4[1] === 'number')
                                ) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            }
                        }
                    } else if ($js.tag === 3) {
                        var match$5 = param[1];
                        if (typeof match$5 === 'number') {
                            return /* false */ 0;
                        } else if (match$5.tag) {
                            return /* false */ 0;
                        } else {
                            var match$6 = match$5[1];
                            if (typeof match$6 === 'number') {
                                return /* false */ 0;
                            } else if (match$6.tag === 1) {
                                var $js$1 = match$6[1];
                                if (typeof $js$1 === 'number' || $js$1.tag !== 3) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            } else {
                                return /* false */ 0;
                            }
                        }
                    } else {
                        return /* false */ 0;
                    }
                    break;
                case 2:
                    var $js$2 = match$1[1];
                    if (typeof $js$2 === 'number') {
                        if ($js$2) {
                            return /* false */ 0;
                        } else {
                            var match$7 = param[1];
                            if (typeof match$7 === 'number') {
                                return /* false */ 0;
                            } else if (match$7.tag) {
                                return /* false */ 0;
                            } else {
                                var match$8 = match$7[1];
                                if (
                                    typeof match$8 === 'number' ||
                                        !(match$8.tag === 2 &&
                                            typeof match$8[1] === 'number')
                                ) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            }
                        }
                    } else if ($js$2.tag === 3) {
                        var match$9 = param[1];
                        if (typeof match$9 === 'number') {
                            return /* false */ 0;
                        } else if (match$9.tag) {
                            return /* false */ 0;
                        } else {
                            var match$10 = match$9[1];
                            if (typeof match$10 === 'number') {
                                return /* false */ 0;
                            } else if (match$10.tag === 2) {
                                var $js$3 = match$10[1];
                                if (typeof $js$3 === 'number' || $js$3.tag !== 3) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            } else {
                                return /* false */ 0;
                            }
                        }
                    } else {
                        return /* false */ 0;
                    }
                    break;
                case 4:
                    var match$11 = match$1[1];
                    if (typeof match$11 === 'number') {
                        if (match$11) {
                            return /* false */ 0;
                        } else {
                            var match$12 = param[1];
                            if (typeof match$12 === 'number') {
                                return /* false */ 0;
                            } else if (match$12.tag) {
                                return /* false */ 0;
                            } else {
                                var match$13 = match$12[1];
                                if (
                                    typeof match$13 === 'number' ||
                                        !(match$13.tag === 4 &&
                                            typeof match$13[1] === 'number')
                                ) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            }
                        }
                    } else if (match$11.tag === 5) {
                        var match$14 = match$11[1];
                        if (typeof match$14 === 'number') {
                            if (match$14) {
                                return /* false */ 0;
                            } else {
                                var match$15 = param[1];
                                if (typeof match$15 === 'number') {
                                    return /* false */ 0;
                                } else if (match$15.tag) {
                                    return /* false */ 0;
                                } else {
                                    var match$16 = match$15[1];
                                    if (typeof match$16 === 'number') {
                                        return /* false */ 0;
                                    } else if (match$16.tag === 4) {
                                        var match$17 = match$16[1];
                                        if (
                                            typeof match$17 === 'number' ||
                                                !(match$17.tag === 5 &&
                                                    typeof match$17[1] === 'number')
                                        ) {
                                            return /* false */ 0;
                                        } else {
                                            return /* true */ 1;
                                        }
                                    } else {
                                        return /* false */ 0;
                                    }
                                }
                            }
                        } else if (match$14.tag === 6) {
                            var $js$4 = match$14[1];
                            if (typeof $js$4 === 'number') {
                                if ($js$4) {
                                    return /* false */ 0;
                                } else {
                                    var match$18 = param[1];
                                    if (typeof match$18 === 'number') {
                                        return /* false */ 0;
                                    } else if (match$18.tag) {
                                        return /* false */ 0;
                                    } else {
                                        var match$19 = match$18[1];
                                        if (typeof match$19 === 'number') {
                                            return /* false */ 0;
                                        } else if (match$19.tag === 4) {
                                            var match$20 = match$19[1];
                                            if (typeof match$20 === 'number') {
                                                return /* false */ 0;
                                            } else if (match$20.tag === 5) {
                                                var match$21 = match$20[1];
                                                if (
                                                    typeof match$21 === 'number' ||
                                                        !(match$21.tag === 6 &&
                                                            typeof match$21[1] ===
                                                                'number')
                                                ) {
                                                    return /* false */ 0;
                                                } else {
                                                    return /* true */ 1;
                                                }
                                            } else {
                                                return /* false */ 0;
                                            }
                                        } else {
                                            return /* false */ 0;
                                        }
                                    }
                                }
                            } else if ($js$4.tag === 7) {
                                var match$22 = param[1];
                                if (typeof match$22 === 'number') {
                                    return /* false */ 0;
                                } else if (match$22.tag) {
                                    return /* false */ 0;
                                } else {
                                    var match$23 = match$22[1];
                                    if (typeof match$23 === 'number') {
                                        return /* false */ 0;
                                    } else if (match$23.tag === 4) {
                                        var match$24 = match$23[1];
                                        if (typeof match$24 === 'number') {
                                            return /* false */ 0;
                                        } else if (match$24.tag === 5) {
                                            var match$25 = match$24[1];
                                            if (typeof match$25 === 'number') {
                                                return /* false */ 0;
                                            } else if (match$25.tag === 6) {
                                                var $js$5 = match$25[1];
                                                if (
                                                    typeof $js$5 === 'number' ||
                                                        $js$5.tag !== 7
                                                ) {
                                                    return /* false */ 0;
                                                } else {
                                                    return /* true */ 1;
                                                }
                                            } else {
                                                return /* false */ 0;
                                            }
                                        } else {
                                            return /* false */ 0;
                                        }
                                    } else {
                                        return /* false */ 0;
                                    }
                                }
                            } else {
                                return /* false */ 0;
                            }
                        } else {
                            return /* false */ 0;
                        }
                    } else {
                        return /* false */ 0;
                    }
                    break;
                case 8:
                    var match$26 = match$1[1];
                    if (typeof match$26 === 'number') {
                        if (match$26) {
                            return /* false */ 0;
                        } else {
                            var match$27 = param[1];
                            if (typeof match$27 === 'number') {
                                return /* false */ 0;
                            } else if (match$27.tag) {
                                return /* false */ 0;
                            } else {
                                var match$28 = match$27[1];
                                if (
                                    typeof match$28 === 'number' ||
                                        !(match$28.tag === 8 &&
                                            typeof match$28[1] === 'number')
                                ) {
                                    return /* false */ 0;
                                } else {
                                    return /* true */ 1;
                                }
                            }
                        }
                    } else if (match$26.tag === 9) {
                        var $js$6 = match$26[1];
                        if (typeof $js$6 === 'number') {
                            if ($js$6) {
                                return /* false */ 0;
                            } else {
                                var match$29 = param[1];
                                if (typeof match$29 === 'number') {
                                    return /* false */ 0;
                                } else if (match$29.tag) {
                                    return /* false */ 0;
                                } else {
                                    var match$30 = match$29[1];
                                    if (typeof match$30 === 'number') {
                                        return /* false */ 0;
                                    } else if (match$30.tag === 8) {
                                        var match$31 = match$30[1];
                                        if (
                                            typeof match$31 === 'number' ||
                                                !(match$31.tag === 9 &&
                                                    typeof match$31[1] === 'number')
                                        ) {
                                            return /* false */ 0;
                                        } else {
                                            return /* true */ 1;
                                        }
                                    } else {
                                        return /* false */ 0;
                                    }
                                }
                            }
                        } else if ($js$6.tag === 10) {
                            var match$32 = param[1];
                            if (typeof match$32 === 'number') {
                                return /* false */ 0;
                            } else if (match$32.tag) {
                                return /* false */ 0;
                            } else {
                                var match$33 = match$32[1];
                                if (typeof match$33 === 'number') {
                                    return /* false */ 0;
                                } else if (match$33.tag === 8) {
                                    var match$34 = match$33[1];
                                    if (typeof match$34 === 'number') {
                                        return /* false */ 0;
                                    } else if (match$34.tag === 9) {
                                        var $js$7 = match$34[1];
                                        if (
                                            typeof $js$7 === 'number' || $js$7.tag !== 10
                                        ) {
                                            return /* false */ 0;
                                        } else {
                                            return /* true */ 1;
                                        }
                                    } else {
                                        return /* false */ 0;
                                    }
                                } else {
                                    return /* false */ 0;
                                }
                            }
                        } else {
                            return /* false */ 0;
                        }
                    } else {
                        return /* false */ 0;
                    }
                    break;
                default:
                    return /* false */ 0;
            }
        }
    }
}

function valid_range(l, r) {
    var match = key_compare(l, r);
    if (match >= 2) {
        return /* false */ 0;
    } else {
        return /* true */ 1;
    }
}

function collect_while(ini, fn, t) {
    var collect = function(_acc, _param) {
        while (true) {
            var param = _param;
            var acc = _acc;
            if (param) {
                var s = param[0];
                var match = Curry._1(fn, s);
                if (match !== 0) {
                    _param = next_key_opt(s, t);
                    _acc = /* :: */ [s, acc];
                    continue;
                } else {
                    return acc;
                }
            } else {
                return acc;
            }
        }
    };
    var match = find_opt(ini, t);
    if (match) {
        var s = match[0];
        return List.rev(collect(/* :: */ [s, /* [] */ 0], next_key_opt(s, t)));
    } else {
        return /* [] */ 0;
    }
}

function subkeys(ini, t) {
    var still_subkey = function(param) {
        var l = ini;
        var r = param;
        var match = key_compare(l, r);
        if (match !== 1) {
            return /* false */ 0;
        } else {
            return 1 - is_same_level(/* tuple */ [l, r]);
        }
    };
    return collect_while(ini, still_subkey, t);
}

function batch(ini, fin) {
    var match = valid_range(ini, fin);
    if (match !== 0) {
        var ini$1 = ini;
        var fin$1 = fin;
        var in_range = function(a) {
            return valid_range(a, fin$1);
        };
        return function(param) {
            return collect_while(ini$1, in_range, param);
        };
    } else {
        return Pervasives.invalid_arg('Kset.batch');
    }
}

exports.d_int = d_int;
exports.d_float = d_float;
exports.d_string = d_string;
exports.table = table;
exports.spk = spk;
exports.field = field;
exports.raw_index = raw_index;
exports.raw_index_field = raw_index_field;
exports.raw_index_field_value = raw_index_field_value;
exports.index_key = index_key;
exports.raw_uindex_field = raw_uindex_field;
exports.uindex_key = uindex_key;
exports.repr = repr;
exports.empty = empty;
exports.add = add;
exports.find = find;
exports.next_key = next_key;
exports.prev_key = prev_key;
exports.subkeys = subkeys;
exports.batch = batch;
/* prefix_separator_str Not a pure module */
